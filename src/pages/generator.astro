---
import Layout from "../layouts/Layout.astro";
---

<Layout>
	<div class="container mx-auto p-6 max-w-7xl">
		<h1 class="text-2xl font-bold mb-8 text-center">Générateur SVG</h1>
		
		<div class="grid grid-cols-1 lg:grid-cols-3 gap-6 h-full">
			<div class="card bg-base-100 shadow-md">
				<div class="card-body">
					<h2 class="card-title text-lg">Prompt</h2>
					<textarea 
						class="textarea textarea-bordered w-full h-32 resize-none" 
						placeholder="Décrivez le SVG que vous souhaitez générer..."
						id="user-prompt"
					></textarea>
					<div class="card-actions justify-end mt-4">
						<button class="btn btn-primary" id="generate-button">
							Générer
						</button>
						<button class="btn btn-secondary" id="edit-button">
							Editer
						</button>
					</div>
				</div>
			</div>

			<div class="card bg-base-100 shadow-md">
				<div class="card-body">
					<h2 class="card-title text-lg">Code SVG</h2>
					<div class="mockup-code h-64 overflow-y-auto">
						<pre id="svg-output" class="text-sm"><code>Le code SVG apparaîtra ici...</code></pre>
					</div>
				</div>
			</div>

			<div class="card bg-base-100 shadow-md">
				<div class="card-body">
					<h2 class="card-title text-lg">Aperçu</h2>
					<div class="border border-base-300 rounded-lg h-64 flex items-center justify-center bg-base-50">
						<div id="svg-container" class="w-full h-full flex items-center justify-center">
							<span class="text-base-content/60">L'aperçu SVG apparaîtra ici...</span>
						</div>
					</div>
				</div>
				<div class="mt-4" id="save-section" style="display: none;">
					<button class="btn btn-success w-full" id="save-button">
						Sauvegarder SVG
					</button>
				</div>
			</div>
		</div>
	</div>
	<script>
		//@ts-nocheck
		let promptList = [];
		let currentSVG = "";
		
		async function generateSVG(prompt, useHistory = false) {
			console.log('Generating SVG for prompt:', prompt);
			
			let requestBody;
			if (useHistory && promptList.length > 0) {
				// Envoyer l'historique complet pour les éditions
				requestBody = { messages: promptList };
			} else {
				// Envoyer juste le prompt pour une nouvelle génération
				requestBody = { prompt };
			}
			
			const res = await fetch('/api/generateSVG', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(requestBody),
			});
			const data = await res.json();
			return data.svg;
		}

		async function saveSVG(params) {
			const res = await fetch("/api/saveSVG", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify(params),
			});
			const data = await res.json();
			return data;
		}

		async function handleSubmit() {
			let prompt = "";
			let svgCode = "";
			const promptElement = document.getElementById("user-prompt");
			prompt = promptElement ? promptElement.value : "";
			console.log('submitted: ', prompt);
			promptList.length = 0; 
    		promptList.push({ role: "user", content: prompt });
			const svgContainer = document.getElementById("svg-container");
			let svgOutput = document.getElementById("svg-output");
			const saveSection = document.getElementById("save-section");
			
			svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
			generateButton.disabled = true;
			editButton.disabled = true;
			
			svgCode = await generateSVG(prompt);
			console.log('svgCode reçu: ', svgCode);
			console.log('type de svgCode: ', typeof svgCode);
			console.log('svgCode est-il vide? ', !svgCode || !svgCode.trim());
			
			if (svgCode && svgCode.trim()) {
				// Ajouter la réponse de l'IA à l'historique
				promptList.push({ role: "assistant", content: svgCode });
				
				currentSVG = svgCode;
				console.log('Mise à jour svgOutput avec: ', svgCode.substring(0, 50) + '...');
				const codeElement = svgOutput.querySelector('code');
				if (codeElement) {
					codeElement.textContent = svgCode;
				} else {
					svgOutput.innerHTML = `<code>${svgCode.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</code>`;
				}
				svgContainer.innerHTML = svgCode;
				saveSection.style.display = "block";
				console.log('svgOutput après mise à jour: ', svgOutput.innerHTML.substring(0, 100) + '...');
			} else {
				console.log('SVG vide ou invalide');
				svgContainer.innerHTML = `<span class="text-error">Erreur lors de la génération du SVG</span>`;
				saveSection.style.display = "none";
			}
			
			generateButton.disabled = false;
			editButton.disabled = false;
		}

		const editButton = document.getElementById("edit-button");

		async function handleEdit() {
			let prompt = "";
			let svgCode = "";
			const promptElement = document.getElementById("user-prompt");
			prompt = promptElement ? promptElement.value : "";
			console.log("Prompt soumis : ", prompt);
			
			// Ajout du prompt de l'utilisateur à la liste
			promptList.push({ role: "user", content: prompt });
			
			const svgContainer = document.getElementById("svg-container");
			let svgOutput = document.getElementById("svg-output");
			
			// Afficher un spinner de chargement
			svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
			generateButton.disabled = true;
			editButton.disabled = true;
			
			// Appeler la fonction pour générer le SVG avec l'historique
			svgCode = await generateSVG(prompt, true);
			console.log("Code SVG généré : ", svgCode);
			
			// Ajouter la réponse de l'IA à la liste des prompts
			promptList.push({ role: "assistant", content: svgCode });
			
			if (svgCode && svgCode.trim()) {
				currentSVG = svgCode;
				const codeElement = svgOutput.querySelector('code');
				if (codeElement) {
					codeElement.textContent = svgCode;
				} else {
					svgOutput.innerHTML = `<code>${svgCode.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</code>`;
				}
				svgContainer.innerHTML = svgCode;
				const saveSection = document.getElementById("save-section");
				saveSection.style.display = "block";
			} else {
				svgContainer.innerHTML = `<span class="text-error">Erreur lors de la génération du SVG</span>`;
				saveSection.style.display = "none";
			}
			
			// Réactiver les boutons
			generateButton.disabled = false;
			editButton.disabled = false;
			console.log("Historique des prompts : ", promptList);
		}

		if (editButton) {
			editButton.addEventListener("click", handleEdit);
		}


		async function handleSave() {
			const name = prompt("Entrez un nom pour le SVG :");
			
			if (!name || !name.trim()) {
				alert("Veuillez entrer un nom pour le SVG");
				return;
			}
			
			if (!currentSVG) {
				alert("Aucun SVG à sauvegarder");
				return;
			}
			
			console.log("Sauvegarde du SVG : ", JSON.stringify(currentSVG));
			
			const saveButton = document.getElementById("save-button");
			saveButton.disabled = true;
			saveButton.textContent = "Sauvegarde...";
			
			try {
				const params = {
					nom: name.trim(),
					code: currentSVG,
					chat_history: JSON.stringify(promptList),
				};
				
				const result = await saveSVG(params);
				
				if (result.success) {
					alert(`SVG "${name}" sauvegardé avec succès !`);
				} else {
					alert(`Erreur lors de la sauvegarde : ${result.error}`);
				}
			} catch (error) {
				console.error('Erreur:', error);
				alert("Erreur lors de la sauvegarde");
			} finally {
				saveButton.disabled = false;
				saveButton.textContent = "Sauvegarder SVG";
			}
		}

		const generateButton = document.getElementById("generate-button");
		if (generateButton) {
			generateButton.addEventListener("click", handleSubmit);
		}

		const saveButton = document.getElementById("save-button");
		if (saveButton) {
			saveButton.addEventListener("click", handleSave);
		}
	</script>
</Layout>