---
import Layout from "../../layouts/Layout.astro";
import pb from "../../utils/pb";
import { Collections, type SvgRecord } from "../../utils/pocketbase-types";
import { ui } from "../../i18n/ui";
const locale = Astro.locals.lang as 'en' | 'fr' ?? 'en';
console.log('Locale in index:', locale);

const id = Astro.params.id;
if (!id) {
    return Astro.redirect('/gallery');
}
const svg: SvgRecord = await pb.collection(Collections.Svg).getOne(id);

// Parse chat_history si c'est une string JSON
let chatHistory = [];
if (svg.chat_history) {
    try {
        chatHistory = JSON.parse(svg.chat_history);
    } catch (e) {
        console.error("Erreur parsing chat_history:", e);
    }
}
---
<Layout>
    <div class="container mx-auto p-6 max-w-7xl">
        <!-- Breadcrumb de navigation -->
        <div class="text-sm breadcrumbs mb-6">
            <ul>
                <li><a href="/" class="text-primary hover:text-primary-focus">{ui[locale].nav.home}</a></li>
                <li><a href="/gallery" class="text-primary hover:text-primary-focus">{ui[locale].nav.gallery}</a></li>
                <li class="text-base-content/60">{svg.nom}</li>
            </ul>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 h-screen">
            <!-- Section SVG -->
            <div class="flex flex-col">
                <h2 class="text-xl font-bold mb-4">{svg.nom}</h2>
                <div class="border border-base-300 rounded-lg p-4 flex items-center justify-center bg-base-50 flex-grow">
                    <div class="w-full h-full flex items-center justify-center">
                        <Fragment set:html={svg.code} />
                    </div>
                </div>
            </div>

            <div class="divider lg:divider-horizontal"></div>

            <!-- Section Chat -->
            <div class="flex flex-col h-full relative">
                <h2 class="text-xl font-bold mb-4">{ui[locale].id.chathistory}</h2>

                <div id="chat-history" class="flex flex-col gap-4 w-full pb-20 overflow-y-auto flex-grow">
                    {
                        (Array.isArray(chatHistory) && chatHistory.length > 0) ? (
                            chatHistory.map((msg: { role: string; content: string; }) => (
                                <div class={`chat ${msg.role === 'user' ? 'chat-start' : 'chat-end'}`}>
                                    <div class={`chat-bubble ${msg.role === 'user' ? 'bg-primary text-primary-content' : 'bg-secondary text-secondary-content'}`}>
                                        <pre>{msg.content}</pre>
                                    </div>
                                    <div class="chat-footer opacity-60 text-xs mt-1">{msg.role}</div>
                                </div>
                            ))
                        ) : (
                            <span class="text-error">{ui[locale].id.chaterror}</span>
                        )
                    }
                </div>

                <!-- Formulaire de chat -->
                <form id="input-prompt-form" class="flex flex-col gap-2 w-full absolute bottom-0 left-0 right-0 bg-base-300 p-4" method="POST" autocomplete="off">
                    <input type="hidden" name="history" id="history-input" value={JSON.stringify(chatHistory)} />
                    <input type="hidden" name="id" value={svg.id} />
                    <div class="flex items-center gap-2">
                        <input id="prompt-input" name="editPrompt" type="text" class="input flex-grow" placeholder={ui[locale].id.enterprompt} />
                        <button class="btn btn-primary" type="submit">{ui[locale].id.edit}</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        //@ts-nocheck
        const chatForm = document.getElementById('input-prompt-form');
        const chatHistoryDiv = document.getElementById('chat-history');
        const historyInput = document.getElementById('history-input');
        const promptInput = document.getElementById('prompt-input');
        const svgContainer = document.querySelector('.border.border-base-300.rounded-lg div');
        
        let currentHistory = JSON.parse(historyInput.value || '[]');

        // Fonction pour générer le SVG
        async function generateSVG(messages) {
            try {
                const response = await fetch('/api/generateSVG', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ messages })
                });
                
                if (!response.ok) throw new Error('Erreur API');
                
                const data = await response.json();
                return data.svg;
            } catch (error) {
                console.error('Erreur génération:', error);
                return 'Erreur lors de la génération du SVG';
            }
        }

        // Fonction pour mettre à jour les données
        async function update(updatedData) {
            const response = await fetch("/api/updateSVG", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(updatedData),
            });
            return response;
        }

        // Fonction pour ajouter un message au chat
        function addChatMessage(role, content) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `chat ${role === 'user' ? 'chat-start' : 'chat-end'}`;
            messageDiv.innerHTML = `
                <div class="chat-bubble ${role === 'user' ? 'bg-primary text-primary-content' : 'bg-secondary text-secondary-content'}">
                    <pre>${content}</pre>
                </div>
                <div class="chat-footer opacity-60 text-xs mt-1">${role}</div>
            `;
            chatHistoryDiv.appendChild(messageDiv);
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
        }

        // Écouteur d'événement pour le formulaire
        chatForm?.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(chatForm);
            const promptText = formData.get('editPrompt')?.toString().trim();
            const svgId = formData.get('id')?.toString();
            
            if (!promptText) return;

            // Ajouter le message utilisateur à l'historique
            const userMessage = { role: 'user', content: promptText };
            currentHistory.push(userMessage);
            
            // Afficher le message utilisateur
            addChatMessage('user', promptText);
            
            // Réinitialiser le champ
            promptInput.value = '';
            
            // Afficher un indicateur de chargement
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'chat chat-end';
            loadingDiv.innerHTML = `
                <div class="chat-bubble">
                    <span class="loading loading-dots loading-sm"></span>
                </div>
            `;
            chatHistoryDiv.appendChild(loadingDiv);
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;

            try {
                // Générer la réponse IA
                const aiResponse = await generateSVG(currentHistory);
                
                // Supprimer l'indicateur de chargement
                loadingDiv.remove();
                
                // Ajouter la réponse IA à l'historique
                const assistantMessage = { role: 'assistant', content: aiResponse };
                currentHistory.push(assistantMessage);
                
                // Afficher la réponse IA
                addChatMessage('assistant', aiResponse);
                
                // Extraire et mettre à jour le SVG
                const svgMatch = aiResponse.match(/<svg[\s\S]*?<\/svg>/i);
                if (svgMatch && svgContainer) {
                    const newSvgCode = svgMatch[0];
                    svgContainer.innerHTML = newSvgCode;
                    
                    // Sauvegarder les modifications
                    const response = await update({
                        id: svgId,
                        code: newSvgCode,
                        chat_history: JSON.stringify(currentHistory),
                    });
                    const data = await response.json();

                    if (data.success) {
                        console.log("SVG updated successfully");
                    } else {
                        console.error("Failed to update SVG:", data.error);
                        alert("Failed to update SVG");
                    }
                }
                
                // Mettre à jour l'input caché
                historyInput.value = JSON.stringify(currentHistory);
                
            } catch (error) {
                // Supprimer l'indicateur de chargement en cas d'erreur
                loadingDiv.remove();
                addChatMessage('assistant', 'Erreur lors de la génération du SVG');
            }
        });
    </script>
</Layout>